import org.rosuda.JRI.*;



public class TalkToROLD {
	  Rengine re=this.openR();
     /**
      * getTukey:
      * 	This method takes the peakarea.csv and timecourse.csv file created in TukeyOLD, 
      *     p value was generated by ANOVA, q value was calculated by using R library "qvalue";
      *     Tukey was calculated by using R program tukeyHSD
      *     
      * @param path  where peakarea.csv and timecourse.csv were stored. 
      * @param timepoints
      * @param replicates
      * @param confLevel
      */
	
	 public double[][] getTukey(String path,double[][] tableForR,String[] diet, int timepoints, int replicates, double confLevel){
 	       
		 
	   		
	   		
		if(re!=null){
			try{					
				
				//String sourcePath="C:/Users/qinqin/Desktop/";
				String sourcePath="//proteome//Filemaker Associated Software/";
				String sourceName=sourcePath+"TukeyFun.R";
				re.assign("sourceName", sourceName);							
				re.eval("source(sourceName)");		
				
				//System.out.println("load source");
				re.eval("num_timepoints<-"+timepoints+"");
				System.out.println("num_timepoints<-"+timepoints+"");
				re.eval("num_replicates<-"+replicates+"");
				System.out.println("num_replicates<-"+replicates+"");
				re.eval("conf<-"+confLevel+"");				
				System.out.println("conf<-"+confLevel+"");				
												
				int numRows=tableForR.length;				
				int numCols=tableForR[0].length;
				
				System.out.println("numRows= " +numRows);
				System.out.println("numCols= " +numCols);
				
				String toEval="ps <- array(0:0, dim=c("+numRows+", "+numCols+"))"; 					
				re.eval(toEval,false);			// now you have a table full of zeros			
				// put stuff in the table
				// make a stack so the R commands can run without overflowing
				java.util.Stack<String> commandStack = new java.util.Stack<String>();
				for(int i = 0; i < numRows; i++){		// for each row of the input table
					for(int j = 0; j < numCols; j++){			// for each column -- there's no way it will be > or < than 6
						toEval = "ps[" + (i+1) + "," + (j+1) + "] <- ";			// one-based indexing
						double num = tableForR[i][j];
						toEval += num;
						commandStack.push(toEval);
					}
				}				
				// use the created stack like the memory stack and make the table in R
				while(!commandStack.isEmpty()){
					String command = commandStack.pop();
					re.eval(command);
					System.out.println(command);
				}
																
				re.eval(toEval);
				System.out.println(toEval);
				re.assign("diet", diet);
				
				
				re.eval("diet<-t(diet)");
				System.out.println("diet<-t(diet)");
				
				
				re.eval("library(qvalue)");
				System.out.println("output<-get_Tukey_Anova(num_timepoints,num_replicates,ps,diet,conf)");
				re.eval("output<-get_Tukey_Anova(num_timepoints,num_replicates,ps,diet,conf)");
				System.out.println("output<-get_Tukey_Anova(num_timepoints,num_replicates,ps,diet,conf)");
				
				//export result with column names				
				String filename=path+"_Tukeyresult.csv";
				re.assign("filename",filename);
				//re.eval("final=replace(output,is.na(output),'')");
				re.eval("write.csv(output,file=filename,row.names=FALSE)");
				System.out.println("write.csv(output,file=filename,row.names=FALSE)");
				REXP tukeys=re.eval("as.matrix(output)");
				double[][] output=tukeys.asDoubleMatrix();							   	            
	            return output;
	        
			}catch (Exception e) {
				System.out.println("EX:"+e);
				e.printStackTrace();
			}
			re.end();
			
		}
		
		 else{
     	 System.out.println("can not load R");
      }
		
      re.end();
	  return null;
	}	
	
	
		
	/**
	 * openR:
	 *   This method checks that the R version installed is the correct version, and that R
	 *   can be loaded and the Rengine used for this program can be made. If not, it prints out
	 *   an error message.
	 * 	
	 * @param none
	 * @return re, an Rengine to be used to communicate with R and do calculations therein
	 */

	Rengine openR(){
		if (!Rengine.versionCheck()) {
			System.err.println("** Version mismatch - Java files don't match library version.");
			System.exit(1);
		}
		// Creating the R Engine	(this is code from the "rtest" file of the JRI package)
		String[] r_args = {"--save"};
		
		Rengine re=new Rengine(r_args,false,new TextConsole());
		
		// the engine creates R is a new thread, so we should wait until it's ready
		if (!re.waitForR()) {
			System.out.println("Cannot load R");
			return null;
		}
		return re;
	}
	
	
	
	/**
	 * class TextConsole:
	 *   The class TextConsole is required to create an R Engine that is ready to be run; for the
	 *   purposes of this code, TextConsole doesn't need any methods, as the R Engine used here never
	 *   needs to ensure that anything is printed out for a user to see. 	
	 */

	class TextConsole implements RMainLoopCallbacks
	{
		public void rWriteConsole(Rengine re, String text, int oType) {
		}

		public void rBusy(Rengine re, int which) {
		}

		public String rReadConsole(Rengine re, String prompt, int addToHistory) {
			return null;
		}

		public void rShowMessage(Rengine re, String message) {
		}

		public String rChooseFile(Rengine re, int newFile) {
			String res=null;
			return res;
		}

		public void   rFlushConsole (Rengine re) {
		}

		public void   rLoadHistory  (Rengine re, String filename) {
		}			

		public void   rSaveHistory  (Rengine re, String filename) {
		}			
	}
	
	
	
}	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

